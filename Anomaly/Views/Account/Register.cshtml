@using Anomaly.Data.Constraints
@using Anomaly.Helpers

@model RegisterViewModel

<main class="register-main">
    <div class="register-main-wrapper">
        <div class="register-main-logotype-wrapper">
            <a asp-controller="Home" asp-action="Index">
                <img class="register-main-logotype" src="~/img/logotype.png" alt="logotype">
            </a>
        </div>
        <div class="register-main-form-wrapper">
            <form method="post" asp-action="register" autocomplete="off" spellcheck="false">
                <div>
                    <label id="email-input-label" for="email-input" class="register-form-label">
                        @(Model.IsEmailExist ? RegisterViewModel.EmailExistMessageText : RegisterViewModel.EmailIsNotExistMessageText)
                    </label>
                    <input name="email" id="email-input" 
                           class="register-main-input-text@(Model.IsEmailExist ? " border-red" : "")"
                           value="@Model.PreviousEmail">
                </div>
                <div>
                    <label id="login-input-label" for="login-input" class="register-form-label">
                        @(Model.IsNicknameTaken ? RegisterViewModel.NicknameTakenMessageText : RegisterViewModel.NicknameIsNotTakenMessageText)
                    </label>
                    <input name="login" id="login-input" 
                           class="register-main-input-text@(Model.IsNicknameTaken ? " border-red" : "")"
                           value="@Model.PreviousLogin">
                </div>
                <div>
                    <label for="password-input" class="register-form-label">
                        пароль (от @UserEntityConstraints.PASSWORD_MIN_LENGTH до @UserEntityConstraints.PASSWORD_MAX_LENGTH симв.)
                    </label>
                    <input name="password" id="password-input" class="register-main-input-text" type="password" value="@Model.PreviousPassword">
                    <label for="repeat-password-input" class="register-form-label">повторите пароль</label>
                    <input id="repeat-password-input" class="register-main-input-text" type="password">
                    <div class="register-main-password-switch-visibility-wrapper">
                        <span id="password-switch-visibility" class="register-main-password-switch-visibility register-main-passwords-hidden"></span>
                    </div>
                </div>
                <div>
                    <input id="submit-button" class="register-main-submit-button" type="submit" value="отправить">
                </div>
            </form>
        </div>
        <div class="register-have-account-link-wrapper">
            <a class="register-have-account-link" asp-action="Login">
                уже есть аккаунт?
            </a>
        </div>
    </div>
</main>
<script>
   
    function addEventHandlers(input) {

        input.addEventListener("focus", event => {

            if (!input.classList.contains("border-red")) {

                input.classList.add("register-main-input-text-focused");
            }
        });

        input.addEventListener("blur", event => {

            if (!input.classList.contains("border-red")) {

                input.style.border = "";
            }

            if (input.classList.contains("register-main-input-text-focused")) {

                input.classList.remove("register-main-input-text-focused");
            }
        });

        input.addEventListener("input", event => {

            if (input.classList.contains("border-red")) {

                input.classList.remove("border-red");
                input.classList.add("register-main-input-text-focused");
            }
        });
    }

    function addDefaultTextHandler(input, label, defaultText) {

        input.addEventListener("input", event => {

            if (label.innerText !== defaultText) {

                label.innerText = defaultText;
            }
        });
    }

    function addPasswordEventHandlers(passwordInput, repeatPasswordInput) {

        function addFocusEventListener(firstInput, secondInput) {

            firstInput.addEventListener("focus", event => {

                if (!firstInput.classList.contains("border-red")) {

                    firstInput.classList.add("register-main-input-text-focused");
                }
            });
        }

        function addBlurEventListener(firstInput, secondInput) {

            firstInput.addEventListener("blur", event => {

                if (!firstInput.classList.contains("border-red")) {

                    firstInput.style.border = "";
                    secondInput.style.border = "";
                }

                if (firstInput.classList.contains("register-main-input-text-focused")) {

                    firstInput.classList.remove("register-main-input-text-focused");
                    secondInput.classList.remove("register-main-input-text-focused");
                }
            });
        }

        function addInputEventListener(firstInput, secondInput) {

            firstInput.addEventListener("input", event => {

                if (firstInput.classList.contains("border-red")) {

                    firstInput.classList.remove("border-red");
                    firstInput.classList.add("register-main-input-text-focused");

                    secondInput.classList.remove("border-red");
                }
            });
        }

        addFocusEventListener(passwordInput, repeatPasswordInput);
        addFocusEventListener(repeatPasswordInput, passwordInput);

        addBlurEventListener(passwordInput, repeatPasswordInput);
        addBlurEventListener(repeatPasswordInput, passwordInput);

        addInputEventListener(passwordInput, repeatPasswordInput);
        addInputEventListener(repeatPasswordInput, passwordInput);
    }

    function addPasswordVisibilitySwitcher(passwordVisibilitySwitcher, passwordInput, repeatPasswordInput) {

        passwordVisibilitySwitcher.addEventListener("click", event => {

            passwordVisibilitySwitcher.classList.toggle("register-main-passwords-visible");
            passwordVisibilitySwitcher.classList.toggle("register-main-passwords-hidden");

            if (passwordInput.getAttribute("type") === "password") {

                passwordInput.setAttribute("type", "text")
                repeatPasswordInput.setAttribute("type", "text")
            }
            else {

                passwordInput.setAttribute("type", "password")
                repeatPasswordInput.setAttribute("type", "password")
            }
        });
    }

    function addSubmitButtonHandler(emailInput, loginInput, passwordInput, repeatPasswordInput, submitButton) {

        function isEmailValid(email) {

            const re = new RegExp("@Html.Raw(RegexHelper.EmailValidationRegex)");

            return email.toLowerCase().match(re);
        }

        submitButton.addEventListener("click", event => {

            if (!isEmailValid(emailInput.value)) {

                if (!emailInput.classList.contains("border-red")) {

                    emailInput.classList.add("border-red");
                }

                event.preventDefault();
            }

            if (!(@UserEntityConstraints.NICKNAME_MIN_LENGTH <= loginInput.value.length && loginInput.value.length <= @UserEntityConstraints.NICKNAME_MAX_LENGTH)) {

                if (!loginInput.classList.contains("border-red")) {

                    loginInput.classList.add("border-red");
                }

                event.preventDefault();
            }

            if (!(@UserEntityConstraints.PASSWORD_MIN_LENGTH <= passwordInput.value.length && passwordInput.value.length <= @UserEntityConstraints.PASSWORD_MAX_LENGTH)) {

                if (!passwordInput.classList.contains("border-red")) {

                    passwordInput.classList.add("border-red");
                }

                event.preventDefault();
            }

            if (!(@UserEntityConstraints.PASSWORD_MIN_LENGTH <= repeatPasswordInput.value.length && repeatPasswordInput.value.length <= @UserEntityConstraints.PASSWORD_MAX_LENGTH)) {

                if (!repeatPasswordInput.classList.contains("border-red")) {

                    repeatPasswordInput.classList.add("border-red");
                }

                event.preventDefault();
            }

            if (passwordInput.value !== repeatPasswordInput.value) {

                if (!passwordInput.classList.contains("border-red") || !repeatPasswordInput.classList.contains("border-red")) {

                    passwordInput.classList.add("border-red");
                    repeatPasswordInput.classList.add("border-red");
                }

                event.preventDefault();
            }
        });
    }

    let emailInput = document.getElementById("email-input");
    let loginInput = document.getElementById("login-input");
    let passwordInput = document.getElementById("password-input");
    let repeatPasswordInput = document.getElementById("repeat-password-input");
    let passwordVisibilitySwitcher = document.getElementById("password-switch-visibility");
    let submitButton = document.getElementById("submit-button");

    let emailInputLabel = document.getElementById("email-input-label");
    let loginInputLabel = document.getElementById("login-input-label");

    addEventHandlers(emailInput);
    addDefaultTextHandler(emailInput, emailInputLabel, "@Html.Raw(RegisterViewModel.EmailIsNotExistMessageText)");
    addEventHandlers(loginInput);
    addDefaultTextHandler(loginInput, loginInputLabel, "@Html.Raw(RegisterViewModel.NicknameIsNotTakenMessageText)");
    addPasswordEventHandlers(passwordInput, repeatPasswordInput);
    addPasswordVisibilitySwitcher(passwordVisibilitySwitcher, passwordInput, repeatPasswordInput);
    addSubmitButtonHandler(emailInput, loginInput, passwordInput, repeatPasswordInput, submitButton);

</script>